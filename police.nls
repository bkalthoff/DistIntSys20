
police-own [
  next-task
  person-to-search
  person-to-follow
  search-tick
  follow-tick
  someoneAskedForHelp
  ImOccupied
  RespondingOnHelp

  homeAdress
  goToWork
  dayShift?
  shift
  status
  
  list-of-known-gangsters
  chance-of-finding-gangster
  
]

to setup-police
  
  create-police number-of-police
  [
    set shape  "person police"
    set color blue
    set search-tick 0
    set size 2
    set follow-tick -1
    set shift number-of-police
    set homeAdress one-of houses
    setxy [ xcor ] of homeAdress [ ycor ] of homeAdress
    setxy random-xcor random abs 11
    set next-task [ -> move-police ]
    ask police [
      ifelse shift <= number-of-police / 2 [
        set dayShift? true
      ][
        set dayShift? false
      ]
      set shift shift - 1
    ]
  ]
  
end

to idle
  run next-task
end

to move-police
  ifelse abs xcor > 15 or ycor <= -10 or ycor > 14 and next-task != [ -> search-person ] [
    set heading towards patch 0 0
  ] [
    ifelse time >= 1199 or time <= 300 [
      if dayShift? = true[
        set next-task [-> police-go-home]
      ]
    ][
      ifelse time >= 350 or time <= 650[
        if dayShift? = false[
          set next-task [-> police-go-home]
        ]
      ]
      [
        right random 45
        left random 45
      ]
    ]
  ]
  
  forward 0.5
  
  ifelse any? (adults-here with [ stoppedByPolice? = false and state != "work" ]) [
    let target one-of adults-here
    ask target [
      set stoppedByPolice? true
    ]
    set person-to-search target
    set next-task [ -> search-person ]
  ][
    if any? child-gangsters-here with [followedByPolice? = false and hidden? = false] [
      let target one-of child-gangsters-here
      ask target [
        set followedByPolice? true
      ]
      set person-to-follow target
      set chance-of-finding-gangster 1
      set next-task [ -> police-follow-child-gangster ]
    ]
  ]
  
    if any? (hideouts-here with [drugs > 0 or weapons > 0]) or any?(stash-houses-here with [drugs > 0 or weapons > 0])[
      set next-task [ -> ask-for-help ]
  ]
  
  
end

to search-person
  set ImOccupied 1
  set search-tick search-tick + 1
  if search-tick = 10[
    ask person-to-search [
      ifelse hasDrugs? = true [
        set numberOfConvictions numberOfConvictions + 1
        set color yellow
        set hasDrugs? false
        set arrested-time ticks 
      ]
      [
        set stoppedByPolice? false
      ]
    ]
    ifelse [ arrested-time ] of person-to-search != -1 [
      set next-task [ -> police-go-to-jail ]
    ]
    [ set ImOccupied 0
      set next-task [ -> move-police ] ]
    set search-tick 0
  ]
end
to police-go-to-jail
  ifelse distance min-one-of (prison) [distance myself]> 1 [
    set heading towards-nowrap one-of prison with [count turtles-here = 0]
          forward 0.5
  ]
  [
    set ImOccupied 0
    set status status + 1 
    print self print status
    set next-task [ -> move-police]
  ]
end

to ask-for-help  
  let IAskedForHelp self
  set ImOccupied 1
  set someoneAskedForHelp 1
  ifelse any? other police with [ImOccupied = 0] [
    set RespondingOnHelp min-one-of (other police with [ImOccupied = 0]) [distance myself]
 
  ask RespondingOnHelp [ 
    set heading towards-nowrap IAskedForHelp
    if distance min-one-of (other police) [distance myself] > 2 [
    fd 1
    ]
  ]
  ask IAskedForHelp [
    if any? (police-on neighbors) [
      set next-task [-> search-place]
    ]
  ]
]
  [    set next-task [-> ask-for-help]
  ]
end

to search-place
  ifelse any? hideouts-here[ 
  let hideout-to-search hideouts-here
    if [drugs] of (one-of hideout-to-search) > 0 or [weapons]  of (one-of hideout-to-search) > 0
    [set status status + 1]
    print self print status
  ask hideout-to-search [
    set weapons 0
    set drugs 0
    set color orange 
    ]
  ][
    let stash-houses-to-search stash-houses-here
    if [drugs] of (one-of stash-houses-to-search) > 0 or [weapons]  of (one-of stash-houses-to-search) > 0
    [set status status + 1]
    print self print status
    ask stash-houses-to-search [
        set weapons 0
        set drugs 0
        set color pink
    ]
  ]
  set ImOccupied 0
      set next-task [-> move-police]
end

to police-follow-child-gangster
  set follow-tick follow-tick + 1
  ifelse [hidden?] of person-to-follow = true or follow-tick = 400 [
    set follow-tick -1
    set next-task [ -> move-police ]
  ]
  [
      
    ifelse chance-of-finding-gangster = 1 and [carriesDrug?] of person-to-follow = true [        
             
        set next-task [ -> police-investigate ] 
       
    ][
        set heading towards person-to-follow
        ifelse [distance person-to-follow] of self < 3 [
          ifelse [distance person-to-follow] of self < 1 [
            stop
          ][
            forward 0.2
          ]
        ][
          forward 0.5
        ]      
      ]
    
  ]  
end


to police-go-home
  face homeAdress
  forward 0.5
  
  if (distance homeAdress < 0.5)[
    set next-task[-> police-at-home]
  ]
end

to police-at-home
   if (time  = 300)[
    set next-task[-> move-police]
  ]
end

to police-investigate
    set follow-tick follow-tick + 1      
    ifelse [hidden?] of person-to-follow = true or follow-tick = 600 [
      set follow-tick -1
      set next-task [ -> move-police ]
      
  ][
    let gangster-to-investigate adult-gangster-order
  
    if gangster-to-investigate != nobody [
      set size 4
      set list-of-known-gangsters lput gangster-to-investigate list-of-known-gangsters ; adding the adultGangster who told the child to a list of known gangsters      
      show list-of-known-gangsters
    ]  
    
    
  ]
  
end



