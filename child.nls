

children-own [
  next-task
  homeAdress
  schoolAdress
  childGangstersMet
  leavingOffset
  directionOffset
  speed
  recruitAttempt?
  tickStandStill
  recruiter
  previous-task
  stoppedByPolice
  time-in-school
  sick?
  skip?
  favourite-playground
  playground-destination
  playing?
  looking-to-play?
]



to setup-child
  set-default-shape children "person"
  create-children number-of-children [
    set homeAdress one-of houses
    
    setxy [ xcor ] of homeAdress [ ycor ] of homeAdress
    set schoolAdress min-one-of schools [ distance myself ]
    ; set birthDay 1 + random 9
    ;  set age 5 + random 5
    set childGangstersMet 0
    set color white
    set hidden? true
    set recruitAttempt? false
    set leavingOffset random 100
    set speed 0.25
    set tickStandStill 0
    set next-task [ -> child-at-home ]
    set time-in-school 0
    set sick? false
    set skip? false
    set favourite-playground one-of playgrounds
    set favourite-playground favourite-playground
    set playing? false
    set looking-to-play? false
  ]
end

to child-at-home
  if (time + leavingOffset = 800 and not sick?)[
    set hidden? false
    set recruitAttempt? false
    set next-task[-> child-out-playing]
  ]
  
  if (time + leavingOffset = 200) [
    child-skip-or-sick
    ifelse skip?
      [set next-task[-> child-out-playing]]
      [ifelse not sick? [
        set hidden? false
        set recruitAttempt? false
        set next-task[-> child-go-to-school]]
        [set next-task[-> child-go-home]]
      ]
  ]
end

to child-go-to-school
  face schoolAdress
  set directionOffset random 100 + random -100
  set heading heading + directionOffset
  forward speed
  
  if (distance schoolAdress < speed)[
    set hidden? true
    set recruitAttempt? true
    set next-task[-> child-in-school]
  ]
end


to child-in-school
  set time-in-school time-in-school + 1
  if (time + leavingOffset = 600)[
    set hidden? false
    set recruitAttempt? false
    set next-task[-> child-go-home]
  ]
end

to child-go-home
  face homeAdress
  set directionOffset random 100 + random -100
  set heading heading + directionOffset
  forward speed
  
  if (distance homeAdress < speed)[
    set hidden? true
    set next-task[-> child-at-home]
  ]
end

to child-out-playing
  set looking-to-play? true
  ifelse playing? = true [
    ifelse [distance playground-destination] of self > 2 [
      face playground-destination
    ]
    [
      set directionOffset random 100 + random -100
      set heading heading + directionOffset
    ]
    forward 0.25
    
  ]
  [
    let children-to-play count (children with [ looking-to-play? = true and playing? = false ])
    ifelse children-to-play > 4  [
      let playground-vote[]
      ask n-of children-to-play (children with [ looking-to-play? = true and playing? = false ]) [
        set playground-vote lput favourite-playground playground-vote
      ]
      let playground-to-play modes playground-vote
      ask n-of children-to-play (children with [ looking-to-play? = true and playing? = false ]) [
        set playground-destination item 0 playground-to-play
        set playing? true
      ]
    ]
    [
      set directionOffset random 100 + random -100
      set heading heading + directionOffset
      forward 0.25
    ]
  ]
  if (time + leavingOffset > 1000 or time + leavingOffset < 200)[
    set next-task [-> child-go-home]
    set looking-to-play? false
    set playing? false
  ]
end


to child-turn-to-child-gangster
  face recruiter
  
  ifelse(distance recruiter > 1)[
    forward 0.1
  ][
    set tickStandStill tickStandStill + 1
    if (tickStandStill = 25)[
      set tickStandStill 0
      set next-task previous-task
    ]
  ]
end

to child-skip-or-sick
  set sick? false
  set skip? false
  let rand random 10
  (ifelse
    rand = 0
      [set sick? true]
    rand = 1
      [set skip? true
       set hidden? false]
    []
  )
end







